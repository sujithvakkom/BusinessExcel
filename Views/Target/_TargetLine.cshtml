
@using BusinessExcel.Models
@using BusinessExcel.Providers.ProviderContext.Entities
@using BusinessExcel.Providers.ProviderContext
@using BusinessExcel.Controllers.JSON
@using BusinessExcel.Controllers
@using BootstrapHtmlHelper

@model  LineTarget[]
<div class="row table-fields-header">
    <div class="col-md-offset-1 col-md-2 table-fields">
        Has Bonus
    </div>
    <div class="col-md-4 table-fields">
        Category Line
    </div>
    @*<div class="col-md-2 table-fields">
            Min. Achievement (%)
        </div>*@
    <div class="col-md-3 table-fields text-right">
        Target
    </div>
    @*<div class="col-md-2 table-fields">
            Achievement
        </div>
        <div class="col-md-2 table-fields" ">
            Achievement Confirmed
        </div>
        <div class="col-md-2 table-fields">
            Achievement(%)
        </div>*@
</div>
@for (int i = 0; i < Model.Length; i++)
{

        CategoryDetail selection = new CategoryDetail();
        using (var db = new SalesManageDataContext())
        {
            try
            {
                int id = int.Parse(Model[i].Catogery);
                selection = db.getCategoryDetails(id);
            }
            catch (ArgumentNullException) { }
            catch (Exception)
            {
                selection = db.getCategoryDetails(Model[i].Catogery);
            }
        }
    <div class="row">
        <div class="col-md-offset-1 col-md-2 table-fields">
            @Html.AdminLTECheckBoxFor(m => Model[i].IsBonusLine,
                         null,
                         new Dictionary<string, object>() { { "class", "" }, { "autocomplete", "off" } },
                         null,
                         null,
                         false,
                         true)
        </div>
        <div class="col-md-4 table-fields">
            @Html.AdminLTEDropDownListFor(m => Model[i].Catogery,
            htmlLabelAttributes: null,
            htmlDropDownAttributes: new Dictionary<string, object>() { { "class", "form-control select2" }, { "style", "border-style:none !important;width:100%" } },
            htmlGroupAttributes: new Dictionary<string, object>() { },
            autoCompleteOptions: new AutoCompleteOptions()
            {
                AjaxOptions = new AjaxOptions()
                {
                    HttpMethod = "GET",
                    Url = Url.Action(actionName: JSONController.CATEGORYAUTOCOMPLETER, controllerName: JSONController.JSONCONTROLLER)
                },
                DescriptionField = "description",
                IDField = "category_id",
                Formate = "'<tr><td><span>' + state.text + '</span></td></tr>'",
                SelectedItem = selection,
                IsAutoComplete = true,
                SelectItems = null
            }, showLabel: false)
        </div>
        @*<div class="col-md-2 table-fields">

                @Html.AdminLTETextBoxFor(m => m[i].MinAchiveLimit,
                            null,
                            new Dictionary<string, object>() { { "class", "form-control numaric" }, { "autocomplete", "off" } },
                            null,
                            null,
                            "fa-percent",
                            false,
                            true,
                            true)
            </div>*@
        <div class="col-md-3 table-fields">
            @Html.AdminLTETextBoxFor(m => Model[i].Target,
                         null,
                         new Dictionary<string, object>() { { "class", "form-control numaric" }, { "autocomplete", "off" }, { "onchange", "target_line_changed()" } },
                         null,
                         null,
                         "",
                         false,
                         true,
                         false)

        </div>
    </div>
}