@using BusinessExcel.Models
@using BusinessExcel.Providers.ProviderContext.Entities
@using BusinessExcel.Providers.ProviderContext
@using BusinessExcel.Controllers.JSON
@using BusinessExcel.Controllers
@using BootstrapHtmlHelper

@model BaseTarget
@{
    var location = new LocationDetail();
    var user = new UserDetail();
    var tarTemp = new TargetTemplet();
    using (var db = new SalesManageDataContext())
    {
        location = db.getLocationDetail(Model.Location);
        user = db.getUserDetail(Model.UserName);
        try
        {
            var temp = db.getTargetTemplet(Convert.ToInt32(Model.TargetTemplate));
            tarTemp = new TargetTemplet()
            {
                target_id = Convert.ToInt32(temp.TargetTemplate),
                description = temp.Description
            };
        }
        catch (Exception) { }
    }
}
@using (Ajax.BeginForm(
                controllerName: TargetController.TARGET,
                //actionName: TargetController._GETLOCATIONALOCATION,
                actionName: TargetController._MINVIEWLOCATIONTARGET,
                htmlAttributes: new { id = "target-location-search-form" },
                routeValues: null,
                ajaxOptions:new AjaxOptions()
                {
                    InsertionMode = InsertionMode.Replace,
                    HttpMethod = "Post",
                    UpdateTargetId = "location-target-datails",
                    OnBegin = "load_user_assignments()",
                    OnComplete = "ajax_call_load_complete('#page-load')",
                    OnFailure = "loadin_failed",
                    LoadingElementId = "target-load-progress"
                }))
{
    <div class="table-form">
        <div class="row">
            <div class="col-md-4">
                <div class="row">
                    <div class="col-md-4 padding-label">
                        Site
                    </div>
                    <div class="col-md-8">

                        @Html.AdminLTEDropDownListFor(
                          expression: m => Model.Location,
                          htmlLabelAttributes: null,
                          htmlDropDownAttributes: new Dictionary<string, object>() {
                                                { "class", "form-control select2" }
                                             },
                          htmlGroupAttributes: new Dictionary<string, object>() { },
                          autoCompleteOptions: new AutoCompleteOptions()
                          {
                              AjaxOptions = new AjaxOptions()
                              {
                                  HttpMethod = "GET",
                                  Url = Url.Action(actionName: JSONController.LOCATIONAUTOCOMPLETER, controllerName: JSONController.JSONCONTROLLER)
                              },
                              DescriptionField = "description",
                              IDField = "location_id",
                              Formate = "'<tr><td>' + state.id + '</td><td><span>' + state.text + '</span></td></tr>'",
                              SelectedItem = location,
                              IsAutoComplete = true,
                              SelectItems = null
                          },
                          showLabel: false,
                          hasValidation: true
                          )
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 padding-label">
                        Period
                    </div>
                    <div class="col-md-8">

                        @Html.AdminLTEDropDownListFor(
                          m => m.TargetTemplate,
                          htmlLabelAttributes: null,
                          htmlDropDownAttributes: new Dictionary<string, object>() {
                                                { "class", "form-control select2" }
                          },
                          htmlGroupAttributes: new Dictionary<string, object>() { },
                          autoCompleteOptions: new AutoCompleteOptions()
                          {
                              AjaxOptions = new AjaxOptions()
                              {
                                  HttpMethod = "GET",
                                  Url = Url.Action(actionName: JSONController.TARGETTEMPLETAUTOCOMPLETER, controllerName: JSONController.JSONCONTROLLER)
                              },
                              DescriptionField = "description",
                              IDField = "target_id",
                              Formate = "'<tr><td><span>' + state.text + '</span></td></tr>'",
                              SelectedItem = tarTemp,

                              IsAutoComplete = true,
                              SelectItems = null
                          },
                          showLabel: false,
                          hasValidation: true,
                          extras: new System.Linq.Expressions.Expression<Func<BaseTarget, Object>>[] { m => Model.Location }
                          )
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-4 padding-label">
                        Employ
                    </div>
                    <div class="col-md-8">

                        @Html.AdminLTEDropDownListFor(
        expression: m => Model.UserName,
        htmlLabelAttributes: null,
        htmlDropDownAttributes: new Dictionary<string, object>() {
            { "class", "form-control select2" } ,
            { "onchange", "user_changed(this)" }
        },
        htmlGroupAttributes: new Dictionary<string, object>() { },
        autoCompleteOptions: new AutoCompleteOptions()
        {
            AjaxOptions = new AjaxOptions()
            {
                HttpMethod = "GET",
                Url = Url.Action(actionName: JSONController.USERAUTOCOMPLETER, controllerName: JSONController.JSONCONTROLLER)
            },
            DescriptionField = "full_name",
            IDField = "user_name",
            Formate = "'<tr><td>' + state.id + '</td><td><span>' + state.text + '</span></td></tr>'",
            SelectedItem = user,
            IsAutoComplete = true,
            SelectItems = null
        },
        showLabel: false,
        hasValidation: true
        )
                    </div>
                </div>
                <div class="row box-body">
                    <div class="col-md-offset-4 col-md-2">
                        <input type="submit" class="btn btn-primary" value="Load Details" />
                        @{
                            Html.RenderPartial("_Progress", "target-load-progress");
                        }
                    </div>
                </div>
            </div>
            <div class="col-md-8" id="location-target-datails">
            </div>
        </div>
    </div>
                            }
<div id="location-target-allocation">
    @if (Model.LineTargets.Where(x => !string.IsNullOrEmpty(x.Catogery)).Select(x => x).Count() > 0)
    {
        Html.RenderAction(TargetController._GETLOCATIONALOCATION, TargetController.TARGET, Model);
    }
    @if (ViewBag.Result != null)
    {
        var message = "";
        var className = @"";
        switch ((int)ViewBag.Result)
        {
            case -1:
                className = @"alert alert-danger";
                message = "<b>Cannot save.</b>";
                break;
            case -2:
                className = @"alert alert-warning";
                message = "<b>Updated.</b>";
                break;
            default:
                className = @"alert alert-success";
                message = "<b>Successfully saved.</b>";
                break;
        }

        if (ViewBag.ModelErrors != null)
        {
            foreach (var err in ((string)ViewBag.ModelErrors).Split(new[] { Environment.NewLine }, StringSplitOptions.None))
            { message += ("<p>" + err + "</p>"); }
        }
        if (ViewBag.Message != null)
        {
            message += ("<p>" + ViewBag.Message + "</p>");
        }
        <div class="@className" role="alert">@Html.Raw(message)</div>
    }
</div>