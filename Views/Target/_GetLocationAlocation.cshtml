@*For User Target Distribution Partial view*@

@using BusinessExcel.Models
@using BusinessExcel.Providers.ProviderContext.Entities
@using BusinessExcel.Providers.ProviderContext
@using BusinessExcel.Controllers.JSON
@using BusinessExcel.Controllers
@using BootstrapHtmlHelper
@model BaseTarget
@*<div class="row">
        <div class="col-md-12">
            <div class="box-body">
                <div class="box  box-primary">
                    <div class="box-header with-border">
                        <h>Assign to users</h>
                    </div>
                    <div class="box-body"></div>
                </div>
            </div>
        </div>
    </div>*@
<div class="row">

    @if (Model.LineTargets.Length > 0)
    {
        var total = Model.LineTargets.Sum(x => x.Target);
        var formID = "target-distribute-form-" + Model.TargetTemplate + "-" + Model.Location + "-" + Model.UserName;
        using (Ajax.BeginForm(
        controllerName: TargetController.TARGET,
        actionName: TargetController.TARGETDISTRIBUTION,
        htmlAttributes: new { id = formID },
        routeValues: null,
        ajaxOptions:
        new AjaxOptions()
        {
            InsertionMode = InsertionMode.Replace,
            HttpMethod = "Post",
            UpdateTargetId = "location-target-datails",
            OnBegin = "move('#page-load')",
            OnComplete = "ajax_call_load_complete('#page-load')",
            OnFailure = "loadin_failed",
            LoadingElementId = "target-assing-traget-progress"
        }))
        {
            @Html.AntiForgeryToken()
            <div class="row table-form">
            </div>
            <div>

                @Html.HiddenFor(m => Model.TargetTemplate)
                @Html.HiddenFor(m => Model.Location)

            </div>
                        <div class="table-form" style="padding: 0px 30px 15px 30px">

                            <div class="row table-fields-header">
                                <div class="col-md-1 table-fields" style="white-space:nowrap;overflow:hidden;text-overflow:ellipsis;">
                                    Has Bonus
                                </div>
                                <div class="col-md-1 table-fields">
                                    Line
                                </div>
                                <div class="col-md-2 table-fields">
                                    Total Target
                                </div>
                                <div class="col-md-2 table-fields">
                                    Assigned Target
                                </div>
                                <div class="col-md-2 table-fields">
                                    Available Target
                                </div>
                                <div class="col-md-2 table-fields">
                                    Allocation
                                </div>
                                <div class="col-md-2 table-fields">
                                    Target
                                </div>
                            </div>
                            <div id="target-row">
                                @for (int i = 0; i < Model.LineTargets.Length; i++)
                                {
                                    decimal? maxallocationPct = 0;
                                    CategoryDetail selection = new CategoryDetail();
                                    using (var db = new SalesManageDataContext())
                                    {
                                        int id = 0;
                                        int temp;
                                        try
                                        {
                                            temp = int.Parse(Model.LineTargets[i].Catogery);
                                            selection = db.getCategoryDetails(temp);
                                        }
                                        catch (Exception)
                                        {
                                            selection = db.getCategoryDetails(Model.LineTargets[i].Catogery);
                                        }
                                    }
                                    <div class="row">
                                        <div class="col-md-1 table-fields">
                                            @Html.AdminLTECheckBoxFor(m => Model.LineTargets[i].IsBonusLine,
     null,
     new Dictionary<string, object>() { { "class", "form-control pull-right" }, { "autocomplete", "off" } },
     null,
     null,
     false,
     true)
                                        </div>
                                        <div class="col-md-1 table-fields">
                                            @Html.HiddenFor(m => Model.LineTargets[i].Catogery)
                                            <div class="form-control">
                                                @selection.description
                                            </div>
                                            @*@Html.AdminLTEDropDownListFor(m => Model.LineTargets[i].Catogery,
                                                htmlLabelAttributes: null,
                                                htmlDropDownAttributes: new Dictionary<string, object>() { { "class", "form-control select2" }, { "style", "border-style:none !important" }, { "disabled", "true" } },
                                                htmlGroupAttributes: new Dictionary<string, object>() { },
                                                autoCompleteOptions: new AutoCompleteOptions()
                                                {
                                                    AjaxOptions = new AjaxOptions()
                                                    {
                                                        HttpMethod = "GET",
                                                        Url = Url.Action(actionName: JSONController.CATEGORYAUTOCOMPLETER, controllerName: JSONController.JSONCONTROLLER)
                                                    },
                                                    DescriptionField = "description",
                                                    IDField = "category_id",
                                                    Formate = "'<tr><td><span>' + state.text + '</span></td></tr>'",
                                                    SelectedItem = selection,
                                                    IsAutoComplete = true,
                                                    SelectItems = null
                                                }, showLabel: false)*@
                                        </div>
                                        <div class="col-md-2 table-fields">
                                            @{var idTotalTarget = "LineTargets_" + i.ToString() + "__TotalTarget";}
                                            <div id="@idTotalTarget" class="form-control text-info numaric">
                                                @Html.AdminLTEParagraph(Model.LineTargets[i].TotalTarget, new Dictionary<string, object> { { "class", "numaric" } })
                                            </div>
                                        </div>
                                        <div class="col-md-2 table-fields">
                                            @{var idAssignedForCurrentUser = "LineTargets_" + i.ToString() + "__AssignedForCurrentUser";}
                                            <div id="@idAssignedForCurrentUser" class="form-control text-info numaric">
                                                @Html.AdminLTEParagraph(Model.LineTargets[i].AssignedForCurrentUser, new Dictionary<string, object> { { "class", "numaric" } })
                                            </div>
                                        </div>
                                        <div class="col-md-2 table-fields">
                                            @{var idAvilable = "LineTargets_" + i.ToString() + "__AvilableTarget";}
                                            <div id="@idAvilable" class="form-control text-info numaric">
                                                @Html.AdminLTEParagraph(Model.LineTargets[i].Target, new Dictionary<string, object> { { "class", "numaric" } })
                                            </div>
                                        </div>
                                        <div class="col-md-2 table-fields">
                                            @{maxallocationPct = (Model.LineTargets[i].Target / Model.LineTargets[i].TotalTarget) * 100;
                                            }
                                            @Html.AdminLTETextBox("LineTargets[" + i.ToString() + "].Allocation",
null,
new Dictionary<string, object>() {
                              { "class", "form-control numaric" },
                              { "autocomplete", "off" } ,
                              { "onchange", "target_line_changed(this,'"+formID+"',"+maxallocationPct.ToString()+")" } },
null,
null,
"fa-percent",
false,
true,
true,
maxallocationPct
)
                                        </div>
                                        <div class="col-md-2 table-fields">
                                            @Html.AdminLTETextBoxFor(m => Model.LineTargets[i].Target,
null,
new Dictionary<string, object>() {
                              { "class", "form-control numaric" },
                              { "autocomplete", "off" } ,
                              { "onchange", "target_line_changed(this,'"+formID+"',"+maxallocationPct.ToString()+")" } },
null,
null,
"",
false,
true,
false)
                                        </div>
                                    </div>
                                                }
                                <div class="row">
                                    <div class="col-lg-offset-10 col-md-2 table-fields">
                                        @Html.AdminLTETextBox("TotalTarget",
null,
new Dictionary<string, object>() { { "class", "form-control numaric" }, { "autocomplete", "off" }, { "disabled", "true" } },
null,
null,
"",
false,
true,
false,
total)
                                    </div>
                                </div>
                            </div>
                        </div>
                                                var totalAvil = Model.LineTargets.Sum(x => x.Target);
                                                totalAvil = totalAvil == null ? 0 : totalAvil;
                                                if (totalAvil > 0)
                                                {
                                                    <div class="row table-form">
                                                        <div class="col-md-4 padding-label">
                                                            Employ
                                                        </div>
                                                        <div class="col-md-4">
                                                            @Html.AdminLTEDropDownListFor(
  expression: m => Model.UserName,
  htmlLabelAttributes: null,
  htmlDropDownAttributes: new Dictionary<string, object>() {
                                                            { "class", "form-control select2" } ,
                                                            { "onchange", "user_changed(this)" }
                                                        },
  htmlGroupAttributes: new Dictionary<string, object>() { },
  autoCompleteOptions: new AutoCompleteOptions()
  {
      AjaxOptions = new AjaxOptions()
      {
          HttpMethod = "GET",
          Url = Url.Action(actionName: JSONController.USERAUTOCOMPLETER, controllerName: JSONController.JSONCONTROLLER)
      },
      DescriptionField = "full_name",
      IDField = "user_name",
      Formate = "'<tr><td>' + state.id + '</td><td><span>' + state.text + '</span></td></tr>'",
      IsAutoComplete = true,
      SelectItems = null
  },
  showLabel: false,
  hasValidation: true
  )
                                                        </div>

                                                        <div class="col-md-2">

                                                            @Html.AdminLTEFromSubmitter("Assign Targets",
                                                           "target-assing-traget-progress",
                                                           new Dictionary<string, object>() {
                                                               { "type", "submit" } ,
                                                               { "class","btn btn-primary"}
                                                           },
                                                           Url.Content("~/Images/progress.gif")
                                                           )
                                                            @*<input type="submit" class="btn btn-primary" value="Assign Targets" />

                                                                @{ Html.RenderPartial("_Progress", "target-assing-traget-progress");
                                                                }*@

                                                        </div>
                                                    </div>
                                                    <div class="row" style="padding-top:10px">

                                                        @if (ViewBag.Result != null)
                                                        {
                                                            var message = "";
                                                            var className = @"";
                                                            switch ((int)ViewBag.Result)
                                                            {
                                                                case -1:
                                                                    className = @"alert alert-danger";
                                                                    message = "<b>Cannot save.</b>";
                                                                    break;
                                                                case -2:
                                                                    className = @"alert alert-warning";
                                                                    message = "<b>Updated.</b>";
                                                                    break;
                                                                default:
                                                                    className = @"alert alert-success";
                                                                    message = "<b>Successfully saved.</b>";
                                                                    break;
                                                            }

                                                            if (ViewBag.ModelErrors != null)
                                                            {
                                                                foreach (var err in ((string)ViewBag.ModelErrors).Split(new[] { Environment.NewLine }, StringSplitOptions.None))
                                                                { message += ("<p>" + err + "</p>"); }
                                                            }
                                                            if (ViewBag.Message != null)
                                                            {
                                                                message += ("<p>" + ViewBag.Message + "</p>");
                                                            }
                                                            <div class="row save-message">
                                                                <div class="col-md-offset-1 col-md-8">
                                                                    <div class="@className" role="alert">@Html.Raw(message)</div>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                        }
                                                    }
                                                }
</div>
