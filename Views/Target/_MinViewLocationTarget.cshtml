@using BusinessExcel.Models
@using BusinessExcel.Providers.ProviderContext.Entities
@using BusinessExcel.Providers.ProviderContext
@using BusinessExcel.Controllers.JSON
@using BusinessExcel.Controllers
@using BootstrapHtmlHelper
@model BaseTarget

@if (Model.LineTargets.Length > 0)
{
    var total = Model.LineTargets.Sum(x => x.TotalTarget);
    var totalAssingn = Model.LineTargets.Sum(x => x.TotalTarget - x.Target);
    var totalAvil = Model.LineTargets.Sum(x => x.Target);
    var hasBonus = "";
    decimal assing;

    @*<div class="row">
        <div class="col-md-12">
            <div class="box-body">
                <div class="box box-default">
                    <div class="box-header with-border">
                        <h>Site target details</h>
                    </div>
                    <div class="box-body">
                    </div>
                </div>
            </div>
        </div>
    </div>*@
    <div class="row">
        <div class="col-md-12">
            <table class="table table-striped table-bordered ">
                <thead>
                    <tr>
                        <th>
                            Has Bonus
                        </th>
                        <th>
                            Category Line
                        </th>
                        <th class="text-right">
                            Total Target
                        </th>
                        <th class="text-right">
                            Assigned Target
                        </th>
                        <th class="text-right">
                            Available Target
                        </th>
                    </tr>
                <tbody>
                    @for (int i = 0; i < Model.LineTargets.Length; i++)
                                        {
                                            CategoryDetail selection = new CategoryDetail();
                                            using (var db = new SalesManageDataContext())
                                            {
                                                selection = db.getCategoryDetails(Model.LineTargets[i].Catogery);
                                                hasBonus = Model.LineTargets[i].IsBonusLine == true ? "Yes" : "No";
                                                assing = (Model.LineTargets[i].TotalTarget == null ? 0 : (decimal)Model.LineTargets[i].TotalTarget) -
                                                                    (Model.LineTargets[i].Target == null ? 0 : (decimal)Model.LineTargets[i].Target);
                                            }
                                        <tr>
                                            <td>
                                                @hasBonus
                                            </td>
                                            <td>
                                                @selection.description
                                            </td>
                                            <td>
                                                @Html.AdminLTEParagraph(Model.LineTargets[i].TotalTarget, new Dictionary<string, object>() { { "class", "numaric" } })
                                            </td>
                                            <td>
                                                @Html.AdminLTEParagraph(assing, new Dictionary<string, object>() { { "class", "numaric" } })
                                            </td>
                                            <td>
                                                @Html.AdminLTEParagraph(Model.LineTargets[i].Target, new Dictionary<string, object>() { { "class", "numaric" } })
                                            </td>
                                        </tr>
                                        }
                    <tr class="footer text-bold">
                        <td colspan="2" class="text-center">Total</td>
                        <td>
                            @Html.AdminLTEParagraph(total, new Dictionary<string, object>() { { "class", "numaric" } })
                        </td>
                        <td>
                            @Html.AdminLTEParagraph(totalAssingn, new Dictionary<string, object>() { { "class", "numaric" } })
                        </td>
                        <td>
                            @Html.AdminLTEParagraph(totalAvil, new Dictionary<string, object>() { { "class", "numaric" } })
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>

                        <div class="row">
                            <div class="col-md-12">

                                @using (Ajax.BeginForm(
controllerName: TargetController.TARGET,
actionName: TargetController._GETLOCATIONALOCATION,
routeValues: null,
ajaxOptions:
new AjaxOptions()
{
    InsertionMode = InsertionMode.Replace,
    HttpMethod = "Post",
    UpdateTargetId = "target-distribution-assign",
    LoadingElementId = "target-assing-traget-progress"
})
)
                                {
                                    @Html.AntiForgeryToken()
                                    @Html.HiddenFor(m => Model.TargetTemplate)
                                    @Html.HiddenFor(m => Model.Location)

                                    if (totalAvil > 0)
                                    {
                                        <div class="col-md-4 padding-label">
                                            Employ
                                        </div>
                                                <div class="col-md-4">
                                                    @Html.AdminLTEDropDownListFor(
                                                        expression: m => Model.UserName,
                                                        htmlLabelAttributes: null,
                                                        htmlDropDownAttributes: new Dictionary<string, object>() {
                                                            { "class", "form-control select2" } ,
                                                            { "onchange", "user_changed(this)" }
                                                        },
                                                        htmlGroupAttributes: new Dictionary<string, object>() { },
                                                        autoCompleteOptions: new AutoCompleteOptions()
                                                        {
                                                            AjaxOptions = new AjaxOptions()
                                                            {
                                                                HttpMethod = "GET",
                                                                Url = Url.Action(actionName: JSONController.USERAUTOCOMPLETER, controllerName: JSONController.JSONCONTROLLER)
                                                            },
                                                            DescriptionField = "full_name",
                                                            IDField = "user_name",
                                                            Formate = "'<tr><td>' + state.id + '</td><td><span>' + state.text + '</span></td></tr>'",
                                                            IsAutoComplete = true,
                                                            SelectItems = null
                                                        },
                                                        showLabel: false,
                                                        hasValidation: true
                                                        )
                                                </div>
                                                <div class="col-md-1">
                                                    <input type="submit" class="btn btn-primary" value="Assign Targets" />
                                                </div>
                                                <div class="col-md-1">
                                                    @{Html.RenderPartial("_Progress", "target-assing-traget-progress");
                                                    }
                                                </div>
                                                        }
                                                        else
                                                        {
                                                            <input type="submit" class="btn btn-primary" value="Assign Targets" disabled="disabled" />
                                                        }

                                                        @*<input type="submit" class="btn btn-primary" value="Assign Targets" >
                                                                @{Html.RenderPartial("_Progress", "target-assing-traget-progress");}
                                                            </input>*@
                                                        }
                            </div>
                        </div>

                                                        }
