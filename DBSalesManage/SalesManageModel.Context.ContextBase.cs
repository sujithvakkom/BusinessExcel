//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DBSalesManage
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity;
    using System.Data.Entity.Core.Objects;
    using System.Data.Entity.Infrastructure;
    using System.Data.SqlClient;
    using System.Linq.Expressions;

    public partial class DBSalesmanageEntities : DbContext
    {
        public DBSalesmanageEntities(String nameOrConnerctionString)
            : base(nameOrConnerctionString)
        {
            Database.SetInitializer<DBSalesmanageEntities>(null);
        }

        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {

            modelBuilder.Conventions.Remove<System.Data.Entity.ModelConfiguration.Conventions.PluralizingEntitySetNameConvention>();
            //modelBuilder.Entity<getItemDetails>().Map(m => m.Properties( getItemDetailsXX()));
            modelBuilder.ComplexType<getItemDetails>().Property(m => m.inventory_item_id).HasColumnName("inventory_item_id");
            modelBuilder.ComplexType<getItemDetails>().Property(m => m.item_code).HasColumnName("item_code");
            modelBuilder.ComplexType<getItemDetails>().Property(m => m.description).HasColumnName("description");
            modelBuilder.ComplexType<getItemDetails>().Property(m => m.model).HasColumnName("model");
            modelBuilder.ComplexType<getItemDetails>().Property(m => m.model_description).HasColumnName("model_description");
            modelBuilder.ComplexType<getItemDetails>().Property(m => m.price).HasColumnName("price");
        }

        private Expression<Func<getItemDetails, object>> getItemDetailsXX()
        {
            throw new NotImplementedException();
        }


        public virtual ObjectResult<getItemDetails> getItemDetailsImport(string item_code, Nullable<int> page_size, ObjectParameter row_count)
        {
            var item_codeParameter = item_code != null ?
                new ObjectParameter("item_code", item_code) :
                new ObjectParameter("item_code", typeof(string)) ;

            var page_sizeParameter = page_size.HasValue ?
                new ObjectParameter("page_size", page_size) :
                new ObjectParameter("page_size", typeof(int));
            
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getItemDetails>("[getItemDetailsTemp]");
        }
        
        public virtual IEnumerable<getItemDetails> getItemDetailsCall(string item_code, Nullable<int> page_size, ObjectParameter row_count)
        {
            var item_codeParameter = item_code != null ?
                new SqlParameter("@item_code", item_code) :
                new SqlParameter("@item_code", typeof(string));

            var page_sizeParameter = page_size.HasValue ?
                new SqlParameter("@page_size", page_size) :
                new SqlParameter("@page_size", typeof(int));

            var row_countParameter = 
                new SqlParameter("@row_count", typeof(int));
            row_countParameter.Direction = System.Data.ParameterDirection.Output;
            
            return this.Database.SqlQuery<getItemDetails>("getItemDetails @item_code, @page_size, @row_count out", item_codeParameter, page_sizeParameter, row_countParameter);
        }
    }
}
